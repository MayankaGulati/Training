	DATATYPES:
Numeric type-

smallint
integer
bigint
decimal
numeric
real
double precision
smallserial
serial
bigserial

Monetory type-
Money

Character type-

character varying(n), varchar(n)
character(n),char(n)
text	

Binary Type-
Bytea

Date/Time types-
timestamp[(p)]
TIMESTAMPTZ
date
time[ (p)]
time[(p)] with timezone
interval[feilds][(p)]

Boolean type-
boolean

Enumerated Type-
Enumerated (enum) types are data types that comprise a static, ordered set of values.
syntax: AS ENUM

Geometric Type-
point
line
lseg 
box 
path
path 
polygon
circle

Network address type-
cidr
inet
macaddr

Bit string type-
bit(n)
bit varying (n)

Text search type-
tsvector
tsquery

UUID Type-
	A UUID (Universally Unique Identifiers) is written as a sequence of lower-case hexadecimal digits, in several groups separated by hyphens, specifically a group of eight digits, followed by three groups of four digits, followed by a group of 12 digits, for a total of 32 digits representing the 128 bits.

XML Type-
The XML data type can be used to store XML data

JSON Type-
	The json data type can be used to store JSON (JavaScript Object Notation) data. 
Array Type-
	PostgreSQL gives the opportunity to define a column of a table as a variable length multidimensional array. 
Composite value Input-
	Composite values can be inserted as a literal constant, enclosing the field values within parentheses and separating them by commas. 
Accessing Composite Types-
	To access a field of a composite column, use a dot followed by the field name, much like selecting a field from a table name. 
Range types-
	Range types represent data types that uses a range of data.


    int4range − Range of integer

    int8range − Range of bigint

    numrange − Range of numeric

    tsrange − Range of timestamp without time zone

    tstzrange − Range of timestamp with time zone

    daterange − Range of date

Object identifier type-
Object identifiers (OIDs) are used internally by PostgreSQL as primary keys for various system tables. 

Pseudo type-
any:        Indicates that a function accepts any input data type.
anyelement: Indicates that a function accepts any data type.
anyarray:   Indicates that a function accepts any array data type.
anynonarray:Indicates that a function accepts any non-array data type.
anyenum:    Indicates that a function accepts any enum data type.
anyrange:   Indicates that a function accepts any range data type.
cstring:    Indicates that a function accepts or returns a null-terminated C string.
internal:   Indicates that a function accepts or returns a server-internal data type.
language_handler:A procedural language call handler is declared to return language_handler.
fdw_handler:A foreign-data wrapper handler is declared to return fdw_handler.
record:     Identifies a function returning an unspecified row type.
trigger:    A trigger function is declared to return trigger.
void:       Indicates that a function returns no value.


		Psql commands:
Postress install:
	
$ sudo apt update
$ sudo apt install postgresql postgresql -contrib

switching over post gress account:

	$ sudo -i -u postgres
	$ psql

to exit out:
	postgres=# \q
to logout from postgres:
	postgres=# exit

create database:
	create database <datbase name>

eg-

postgres=# CREATE DATABASE library_management_system;
CREATE DATABASE
postgres=# \l
                                     List of databases
           Name            |  Owner   | Encoding | Collate | Ctype |   Access privileges   
---------------------------+----------+----------+---------+-------+-----------------------
 library_management_system | postgres | UTF8     | en_IN   | en_IN | 
 postgres                  | postgres | UTF8     | en_IN   | en_IN | 
 template0                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
 template1                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
(4 rows)


\l 
	to see the list of database

\c <database name>
	to enter into data base

exit- to get out of database
Databse can be created using two prompts-
Database sql prompts:
	using postgres Create database <> command
OS command prompts:
	from command line.


Constraints-
	NOT NULL Constraint − Ensures that a column cannot have NULL value.
    • UNIQUE Constraint − Ensures that all values in a column are different.
    • PRIMARY Key − Uniquely identifies each row/record in a database table.
    • FOREIGN Key − Constrains data based on columns in other tables.
    • CHECK Constraint − The CHECK constraint ensures that all values in a column satisfy certain conditions.
    • EXCLUSION Constraint − The EXCLUDE constraint ensures that if any two rows are compared on the specified column(s) or expression(s) using the specified operator(s), not all of these comparisons will return TRUE.


CREATE TABLE Book(
library_management_system(# book_id int primary key not null,
library_management_system(# book_name varchar(50) not null,
library_management_system(# book_author text not null);
CREATE TABLE
library_management_system=# \dt
        List of relations
 Schema | Name | Type  |  Owner   
--------+------+-------+----------
 public | book | table | postgres
(1 row)



Drop table <table name>
	delete the table

\dt
	to view tables

library_management_system=# create table students(
library_management_system(# student_id int primary key not null,
library_management_system(# name text not null,
library_management_system(# age int not null unique,
library_management_system(# marks real default 0);

Using foreign key refrence-

library_management_system=# create table sample_paper(
library_management_system(# Id int primary key not null,
library_management_system(# subject text not null,
library_management_system(# student_id int references students(student_id) );
CREATE TABLE

view created tables-

library_management_system=# \dt
            List of relations
 Schema |     Name     | Type  |  Owner   
--------+--------------+-------+----------
 public | book         | table | postgres
 public | sample_paper | table | postgres
 public | students     | table | postgres
(3 rows)


drop database:

library_management_system=# create database new_database;
CREATE DATABASE
library_management_system=# \l
                                     List of databases
           Name            |  Owner   | Encoding | Collate | Ctype |   Access privileges   
---------------------------+----------+----------+---------+-------+-----------------------
 library_management_system | postgres | UTF8     | en_IN   | en_IN | 
 new_database              | postgres | UTF8     | en_IN   | en_IN | 
 postgres                  | postgres | UTF8     | en_IN   | en_IN | 
 template0                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
 template1                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
(5 rows)

library_management_system=# drop database new_database;
DROP DATABASE
library_management_system=# \l
                                     List of databases
           Name            |  Owner   | Encoding | Collate | Ctype |   Access privileges   
---------------------------+----------+----------+---------+-------+-----------------------
 library_management_system | postgres | UTF8     | en_IN   | en_IN | 
 postgres                  | postgres | UTF8     | en_IN   | en_IN | 
 template0                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
 template1                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
(4 rows)

using if exists-

library_management_system=# drop database if exists new_database;
DROP DATABASE
library_management_system=# \l
                                     List of databases
           Name            |  Owner   | Encoding | Collate | Ctype |   Access privileges   
---------------------------+----------+----------+---------+-------+-----------------------
 library_management_system | postgres | UTF8     | en_IN   | en_IN | 
 postgres                  | postgres | UTF8     | en_IN   | en_IN | 
 template0                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
 template1                 | postgres | UTF8     | en_IN   | en_IN | =c/postgres          +
                           |          |          |         |       | postgres=CTc/postgres
(4 rows)


To view table-

syntax- \d <table name>
	    \d book
                         Table "public.book"
   Column    |         Type          | Collation | Nullable | Default 
-------------+-----------------------+-----------+----------+---------
 book_id     | integer               |           | not null | 
 book_name   | character varying(50) |           | not null | 
 book_author | text                  |           | not null | 
Indexes:
    "book_pkey" PRIMARY KEY, btree (book_id)


Schema -

library_management_system=# create schema firstschema;
CREATE SCHEMA
library_management_system=# create table firstschema.first_table(
library_management_system(# id int primary key not null,
library_management_system(# name text not null);
CREATE TABLE
library_management_system=# select * from firstschema.first_table;
 id | name 
----+------
(0 rows)

drop if schema is empty-
	drop schema <schema name> ;
drop if schema is not empty-
	library_management_system=# drop schema firstschema cascade;
NOTICE:  drop cascades to table firstschema.first_table
DROP SCHEMA

to view table-

syntax- \d <table name>
	    \d book
                         Table "public.book"
   Column    |         Type          | Collation | Nullable | Default 
-------------+-----------------------+-----------+----------+---------
 book_id     | integer               |           | not null | 
 book_name   | character varying(50) |           | not null | 
 book_author | text                  |           | not null | 
Indexes:
    "book_pkey" PRIMARY KEY, btree (book_id)


Schema -

library_management_system=# create schema firstschema;
CREATE SCHEMA
library_management_system=# create table firstschema.first_table(
library_management_system(# id int primary key not null,
library_management_system(# name text not null);
CREATE TABLE
library_management_system=# select * from firstschema.first_table;
 id | name 
----+------
(0 rows)

drop if schema is empty-
	drop schema <schema name> ;
drop if schema is not empty-
	library_management_system=# drop schema firstschema cascade;
NOTICE:  drop cascades to table firstschema.first_table
DROP SCHEMA

insert into -

INSERT INTO TABLE_NAME (column1, column2, column3,...columnN) VALUES (value1, value2, value3,...valueN);

INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);

eg-

library_management_system=# insert into students(student_id, name, age, marks) values(1, 'alex', 15, 70); 
INSERT 0 1

library_management_system=# insert into students values(2, 'aman', 18, 89);
INSERT 0 1
library_management_system=# insert into students values(3, 'boston', 19, 87);
INSERT 0 1

Select query-
syntax:
SELECT column1, column2, columnN FROM table_name;

SELECT * FROM table_name;

library_management_system=# select * from students;
 student_id |  name  | age | marks 
------------+--------+-----+-------
          1 | alex   |  15 |    70
          2 | aman   |  18 |    89
          3 | boston |  19 |    87
(3 rows)

library_management_system=# select name, age from students;
  name  | age 
--------+-----
 alex   |  15
 aman   |  18
 boston |  19
(3 rows)

Expression clause-

SELECT column1, column2, columnN
FROM table_name
WHERE SINGLE VALUE MATCHTING EXPRESSION;
library_management_system=# select * from students where age = 18;
 student_id | name | age | marks 
------------+------+-----+-------
          2 | aman |  18 |    89
(1 row)


library_management_system=# SELECT (15 + 6) AS ADDITION;
 addition 
----------
       21
(1 row)

SELECT COUNT(*) AS "RECORDS" FROM COMPANY;
	to count no of reconds in a table.
library_management_system=# select count (*) as marks from students;
 marks 
-------
     3
(1 row)

where clause-

SELECT column1, column2, columnN
FROM table_name
WHERE [search_condition]
eg-
library_management_system=# select name,age,marks from students where age < 20;
  name  | age | marks 
--------+-----+-------
 alex   |  15 |    70
 aman   |  18 |    89
 boston |  19 |    87
(3 rows)
