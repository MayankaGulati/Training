JOINS-


cross joins-

A CROSS JOIN matches every row of the first table with every row of the second table.
SELECT ... FROM table1 CROSS JOIN table2 ...


library_management_system=# select * from students cross join book ;
 student_id |  name  | age | marks | book_id |     book_name      |   book_author    
------------+--------+-----+-------+---------+--------------------+------------------
          1 | alex   |  15 |    70 |       1 | mindset            | carol s. dweck
          1 | alex   |  15 |    70 |       2 | the psycology book | catherine collin
          1 | alex   |  15 |    70 |       3 | thinking           | daniel kahneman
          3 | boston |  19 |    87 |       1 | mindset            | carol s. dweck
          3 | boston |  19 |    87 |       2 | the psycology book | catherine collin
          3 | boston |  19 |    87 |       3 | thinking           | daniel kahneman
          2 | ammy   |  16 |    60 |       1 | mindset            | carol s. dweck
          2 | ammy   |  16 |    60 |       2 | the psycology book | catherine collin
          2 | ammy   |  16 |    60 |       3 | thinking           | daniel kahneman
          4 | auston |  17 |    60 |       1 | mindset            | carol s. dweck
          4 | auston |  17 |    60 |       2 | the psycology book | catherine collin
          4 | auston |  17 |    60 |       3 | thinking           | daniel kahneman
          5 | candy  |  18 |    60 |       1 | mindset            | carol s. dweck
          5 | candy  |  18 |    60 |       2 | the psycology book | catherine collin
          5 | candy  |  18 |    60 |       3 | thinking           | daniel kahneman
          6 | dimple |  20 |    60 |       1 | mindset            | carol s. dweck
          6 | dimple |  20 |    60 |       2 | the psycology book | catherine collin
          6 | dimple |  20 |    60 |       3 | thinking           | daniel kahneman
(18 rows)

inner join-

SELECT table1.column1, table2.column2...
FROM table1
INNER JOIN table2
ON table1.common_filed = table2.common_field;

library_management_system=# select * from students inner join book on students.student_id=book.book_id ;
 student_id |  name  | age | marks | book_id |     book_name      |   book_author    
------------+--------+-----+-------+---------+--------------------+------------------
          1 | alex   |  15 |    70 |       1 | mindset            | carol s. dweck
          3 | boston |  19 |    87 |       3 | thinking           | daniel kahneman
          2 | ammy   |  16 |    60 |       2 | the psycology book | catherine collin
(3 rows)

The LEFT OUTER JOIN
	
SELECT ... FROM table1 LEFT OUTER JOIN table2 ON conditional_expression ...

library_management_system=# select * from students left outer join book on students.student_id=book.book_id ;
 student_id |  name  | age | marks | book_id |     book_name      |   book_author    
------------+--------+-----+-------+---------+--------------------+------------------
          1 | alex   |  15 |    70 |       1 | mindset            | carol s. dweck
          3 | boston |  19 |    87 |       3 | thinking           | daniel kahneman
          2 | ammy   |  16 |    60 |       2 | the psycology book | catherine collin
          4 | auston |  17 |    60 |         |                    | 
          5 | candy  |  18 |    60 |         |                    | 
          6 | dimple |  20 |    60 |         |                    | 
(6 rows)

The RIGHT OUTER JOIN
SELECT ... FROM table1 RIGHT OUTER JOIN table2 ON conditional_expression ...

library_management_system=# select * from students right outer join book on students.student_id=book.book_id ;
 student_id |  name  | age | marks | book_id |     book_name      |   book_author    
------------+--------+-----+-------+---------+--------------------+------------------
          1 | alex   |  15 |    70 |       1 | mindset            | carol s. dweck
          3 | boston |  19 |    87 |       3 | thinking           | daniel kahneman
          2 | ammy   |  16 |    60 |       2 | the psycology book | catherine collin
(3 rows)

The FULL OUTER JOIN
SELECT ... FROM table1 FULL OUTER JOIN table2 ON conditional_expression ...

library_management_system=# select * from students full outer join book on students.student_id=book.book_id ;
 student_id |  name  | age | marks | book_id |     book_name      |   book_author    
------------+--------+-----+-------+---------+--------------------+------------------
          1 | alex   |  15 |    70 |       1 | mindset            | carol s. dweck
          3 | boston |  19 |    87 |       3 | thinking           | daniel kahneman
          2 | ammy   |  16 |    60 |       2 | the psycology book | catherine collin
          4 | auston |  17 |    60 |         |                    | 
          5 | candy  |  18 |    60 |         |                    | 
          6 | dimple |  20 |    60 |         |                    | 
(6 rows)

UNION-

UNION clause/operator is used to combine the results of two or more SELECT statements without returning any duplicate rows.
The column numberand datatype should be same.

SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]

UNION

SELECT column1 [, column2 ]
FROM table1 [, table2 ]
[WHERE condition]
library_management_system=# select * from student_info;
 id |  name  | parent_name 
----+--------+-------------
  1 | ALex   | auston
  2 | ashu   | lucifer
  3 | vineet | verma
(3 rows)

library_management_system=# select * from book where book_id = 3 union select * from student_info where id =3;
 book_id | book_name |   book_author   
---------+-----------+-----------------
       3 | thinking  | daniel kahneman
       3 | vineet    | verma
(2 rows)

Alias-

alias in table-
SELECT column1, column2....
FROM table_name AS alias_name
WHERE [condition];
SELECT column_name AS alias_name
FROM table_name
WHERE [condition];
library_management_system=# select * from students where marks = 60;
 student_id |  name  | age | marks 
------------+--------+-----+-------
          2 | ammy   |  16 |    60
          4 | auston |  17 |    60
          5 | candy  |  18 |    60
          6 | dimple |  20 |    60
(4 rows)
library_management_system=# select * from students as average_students where marks = 60;
 student_id |  name  | age | marks 
------------+--------+-----+-------
          2 | ammy   |  16 |    60
          4 | auston |  17 |    60
          5 | candy  |  18 |    60
          6 | dimple |  20 |    60
(4 rows)

alias in columns-

library_management_system=# select student_id as SID, name as N, age as A, marks as M from students where marks=60;
 sid |   n    | a  | m  
-----+--------+----+----
   2 | ammy   | 16 | 60
   4 | auston | 17 | 60
   5 | candy  | 18 | 60
   6 | dimple | 20 | 60
(4 rows)

alter table commands-

change table name-

ALTER TABLE table_name
RENAME TO new_name;
library_management_system=# alter table sample_paper rename to sample;
ALTER TABLE
library_management_system=# \dt
            List of relations
 Schema |     Name     | Type  |  Owner   
--------+--------------+-------+----------
 public | book         | table | postgres
 public | sample       | table | postgres
 public | student_info | table | postgres
 public | students     | table | postgres
(4 rows)

add column-
ALTER TABLE table_name ADD column_name datatype;

library_management_system=# select * from student_info;
 id |  name  | parent_name 
----+--------+-------------
  1 | ALex   | auston
  2 | ashu   | lucifer
  3 | vineet | verma
(3 rows)

library_management_system=# alter table student_info add address varchar(225);
ALTER TABLE
library_management_system=# select * from student_info;
 id |  name  | parent_name | address 
----+--------+-------------+---------
  1 | ALex   | auston      | 
  2 | ashu   | lucifer     | 
  3 | vineet | verma       | 
(3 rows)

drop column-
ALTER TABLE table_name DROP COLUMN column_name;

library_management_system=# ALTER TABLE student_info DROP COLUMN address;
ALTER TABLE
library_management_system=# select * from student_info;
 id |  name  | parent_name 
----+--------+-------------
  1 | ALex   | auston
  2 | ashu   | lucifer
  3 | vineet | verma
(3 rows)

to change data type-
ALTER TABLE table_name ALTER COLUMN column_name TYPE datatype;

library_management_system=# alter table students alter column marks type decimal;
ALTER TABLE

to add a NOT NULL constraint -
ALTER TABLE table_name MODIFY column_name datatype NOT NULL;

to ADD UNIQUE CONSTRAINT-
ALTER TABLE table_name
ADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2...);

library_management_system=# ALTER TABLE students  
ADD CONSTRAINT MyUniqueConstraint UNIQUE(name);
ALTER TABLE

to ADD CHECK CONSTRAINT-
ALTER TABLE table_name
ADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);

library_management_system=# ALTER TABLE students
ADD CONSTRAINT marksConstraint CHECK (marks<=100);
ALTER TABLE

to ADD PRIMARY KEY constraint-
ALTER TABLE table_name
ADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2...);

library_management_system=# ALTER TABLE test    
ADD CONSTRAINT MyPrimaryKey PRIMARY KEY (name);
ALTER TABLE

to DROP CONSTRAINT-
ALTER TABLE table_name
DROP CONSTRAINT MyUniqueConstraint;

library_management_system=# alter table students drop constraint myuniqueconstraint;
ALTER TABLE

to DROP PRIMARY KEY constraint-
ALTER TABLE table_name
DROP CONSTRAINT MyPrimaryKey;

library_management_system=# alter table test drop constraint myprimarykey;
ALTER TABLE

INDEXES-

create index on single column-
CREATE INDEX index_name
ON table_name (column_name);
library_management_system=# create index newindex on  book(book_code) ;
CREATE INDEX

Multicolumn Indexes-
CREATE INDEX index_name
ON table_name (column1_name, column2_name);

library_management_system=# CREATE INDEX bookindex 
ON book (book_name, book_author);
CREATE INDEX
Unique Indexes-
CREATE UNIQUE INDEX index_name
on table_name (column_name);
library_management_system=# CREATE UNIQUE INDEX bookuniqueindex
on book (book_code);
CREATE INDEX
Partial Indexes
CREATE INDEX index_name
on table_name (conditional_expression);
Implicit Indexes
# CREATE INDEX salary_index ON COMPANY (salary);

library_management_system=# create index implicitindex on book(book_code);
CREATE INDEX

library_management_system=# \d book
                         Table "public.book"
   Column    |         Type          | Collation | Nullable | Default 
-------------+-----------------------+-----------+----------+---------
 id          | integer               |           | not null | 
 book_name   | character varying(50) |           | not null | 
 book_author | text                  |           | not null | 
 book_code   | text                  |           |          | 
Indexes:
    "book_pkey" PRIMARY KEY, btree (id)
    "bookuniqueindex" UNIQUE, btree (book_code)
    "bookindex" btree (book_name, book_author)
    "implicitindex" btree (book_code)
    "newindex" btree (book_code)

To DROP INDEX 
DROP INDEX index_name;

library_management_system=# drop index newindex;
DROP INDEX

truncate table-
to delete all the rows
TRUNCATE TABLE  table_name;

library_management_system=# select * from student_info;
 id |  name  | parent_name 
----+--------+-------------
  1 | ALex   | auston
  2 | ashu   | lucifer
  3 | vineet | verma
(3 rows)

library_management_system=# truncate table student_info;
TRUNCATE TABLE
library_management_system=# select * from student_info;
 id | name | parent_name 
----+------+-------------
(0 rows)


VIEWS-

CREATE VIEW-
CREATE [TEMP | TEMPORARY] VIEW view_name AS
SELECT column1, column2.....
FROM table_name
WHERE [condition];
library_management_system=# create temp view bookview as select id,book_name,book_code  from book ;
CREATE VIEW

TO view the created view of table-
testdb=# SELECT * FROM COMPANY_VIEW;


library_management_system=# select * from bookview;
 id |     book_name      | book_code 
----+--------------------+-----------
  1 | mindset            | mnth
  2 | the psycology book | kjts
  3 | thinking           | ppqqc
(3 rows)

DROP VIEW-
testdb=# DROP VIEW view_name;

library_management_system=# drop view bookview;
DROP VIEW


