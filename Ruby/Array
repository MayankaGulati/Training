			ARRAYS-

Basic -

3.0.1 :002 > ary=['1','sam','34.5']
 => ["1", "sam", "34.5"] 

3.0.1 :016 > Array.new(3){Array.new(2)}
 => [[nil, nil], [nil, nil], [nil, nil]] 
3.0.1 :017 > arr=[1,2,3,4]
 => [1, 2, 3, 4] 
3.0.1 :018 > arr[2]
 => 3 
3.0.1 :019 > arr[30]
 => nil 
3.0.1 :022 > arr[2..4]
 => [3, 4] 
3.0.1 :023 > arr[2...4]
 => [3, 4] 
3.0.1 :024 > arr[2...-3]
 => [] 
3.0.1 :025 > arr[4..-3]
 => [] 
3.0.1 :026 > arr[1..-3]
 => [2] 
3.0.1 :027 > arr.at(0)
 => 1 
3.0.1 :028 > arr.at(4)
 => nil 
3.0.1 :029 > arr.at(3)
 => 4 


methods to initialise an array-

3.0.1 :023 > Array.[](1,'ghf',9.0)
 => [1, "ghf", 9.0] 
3.0.1 :024 > Array[2,'mnb',89.7]
 => [2, "mnb", 89.7] 
3.0.1 :025 > a=Array.new([:wer,23,'fr'])
 => [:wer, 23, "fr"] 
3.0.1 :027 > b=Array.new(3,'x')
 => ["x", "x", "x"] 
3.0.1 :028 > c=Array.new(4){|index| "#{index}"}
 => ["0", "1", "2", "3"] 

first and last-

3.0.1 :034 > arr=[1,2,3,4,5,6,7,8]
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :035 > arr.first
 => 1 
3.0.1 :036 > arr.last
 => 8 

take and drop method-

3.0.1 :038 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :039 > arr.take(3)
 => [1, 2, 3] 
3.0.1 :040 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :041 > arr.drop(3)
 => [4, 5, 6, 7, 8] 


length and count method-
3.0.1 :042 > arr.length
 => 8 
3.0.1 :043 > arr.count
 => 8 


empty? Method-
3.0.1 :046 > arr.empty?
 => false 
3.0.1 :047 > aar=[]
 => [] 
3.0.1 :048 > aar.empty?
 => true 

include? Method-
3.0.1 :049 > arr.include?(4)
 => true 
3.0.1 :050 > arr.include?(10)
 => false 

push and << method-

3.0.1 :051 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :053 > arr.push('a','b','c')
 => [1, 2, 3, 4, 5, 6, 7, 8, "a", "b", "c"] 
3.0.1 :056 > arr << (9 )
 => [1, 2, 3, 4, 5, 6, 7, 8, "a", "b", "c", 9] 

unshift method-
3.0.1 :057 > arr.unshift(0)
 => [0, 1, 2, 3, 4, 5, 6, 7, 8, "a", "b", "c", 9] 

shift method-
3.0.1 :062 > arr.shift(1)
 => [0] 
3.0.1 :063 > arr
 => [1, 2, 3, "m", "m", "n", "o", "p", 4, 5, 6, 7, 8, "a", "b", "c"]  

insert method-
3.0.1 :058 > arr.insert(4,'m')
 => [0, 1, 2, 3, "m", 4, 5, 6, 7, 8, "a", "b", "c", 9] 
3.0.1 :059 > arr.insert(5,'m','n','o','p')
 => [0, 1, 2, 3, "m", "m", "n", "o", "p", 4, 5, 6, 7, 8, "a", "b", "c", 9] 

pop method
 => [0, 1, 2, 3, "m", "m", "n", "o", "p", 4, 5, 6, 7, 8, "a", "b", "c", 9] 
3.0.1 :060 > arr.pop
 => 9 


delete and delete at-
=> [1, 2, 3, "m", "m", "n", "o", "p", 4, 5, 6, 7, 8, "a", "b", "c"] 
3.0.1 :064 > arr.delete('n')
 => "n" 
3.0.1 :065 > arr
 => [1, 2, 3, "m", "m", "o", "p", 4, 5, 6, 7, 8, "a", "b", "c"] 
3.0.1 :066 > arr.delete_at(6)
 => "p" 


compact method-
3.0.1 :070 > arr.insert(18,'k')
 => [1, 2, 3, "m", "m", "o", 4, 5, 6, 7, 8, "a", "k", "k", "b", "c", nil, nil, "k"] 
3.0.1 :071 > arr.insert(21,'ops')
 => [1, 2, 3, "m", "m", "o", 4, 5, 6, 7, 8, "a", "k", "k", "b", "c", nil, nil, "k", nil, nil, "ops"] 
3.0.1 :072 > arr.compact
 => [1, 2, 3, "m", "m", "o", 4, 5, 6, 7, 8, "a", "k", "k", "b", "c", "k", "ops"] 
3.0.1 :073 > arr.compact!
 => [1, 2, 3, "m", "m", "o", 4, 5, 6, 7, 8, "a", "k", "k", "b", "c", "k", "ops"] 
3.0.1 :074 > arr.compact!
 => nil 

uniq method-
3.0.1 :075 > arr.uniq
 => [1, 2, 3, "m", "o", 4, 5, 6, 7, 8, "a", "k", "b", "c", "ops"] 

each method-
3.0.1 :077 > arr = [1,2,3,4]
 => [1, 2, 3, 4] 
3.0.1 :078 > arr.each{|a| print a *=10,""}
10203040 => [1, 2, 3, 4] 
3.0.1 :079 > arr.each{|a| print a *=10," "}
10 20 30 40  => [1, 2, 3, 4] 
3.0.1 :080 > arr.each{|a| print a +=10,"**"}
11**12**13**14** => [1, 2, 3, 4] 


map method-
3.0.1 :086 > arr
 => [1, 2, 3, 4] 
3.0.1 :087 > arr.map{|a| 2*a}
 => [2, 4, 6, 8] 
3.0.1 :088 > arr.map{|a| 3*a}
 => [3, 6, 9, 12] 

select method-
3.0.1 :003 > arr=[1,2,3,4,5,6,7,8]
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :004 > arr.select{|a| a<4}
 => [1, 2, 3] 
3.0.1 :005 > arr.select{|a| a>7}
 => [8] 
3.0.1 :006 > arr.select{|a| a>10}
 => [] 

reject method-
3.0.1 :007 > arr
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :008 > arr.reject {|a| a>6}
 => [1, 2, 3, 4, 5, 6] 
3.0.1 :009 > arr.reject {|a| a<6}
 => [6, 7, 8] 

drop while method-
3.0.1 :011 > arr.drop_while {|a| a<3}
 => [3, 4, 5, 6, 7, 8] 

delete_if method-
3.0.1 :017 > arr=[1,2,3,4,5,6,7,8]
 => [1, 2, 3, 4, 5, 6, 7, 8] 
3.0.1 :018 > arr.delete_if{|a| a>6}
 => [1, 2, 3, 4, 5, 6] 


