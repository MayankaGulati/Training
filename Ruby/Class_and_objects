#!usr/bin/ruby

class Operations

  def initialize(a,b)
    @@var1=a
    @@var2=b
  end

  def sum()
    puts" #{@@var1+@@var2} "
  end

end

sum1=Operations.new(4,5)
sum1.sum()

sum2=Operations.new(4,6)
sum2.sum()

sum3=Operations.new(4,7)
sum3.sum()

sum4=Operations.new(4,8)
sum4.sum()

sum5=Operations.new(4,9)
sum5.sum()
                                                                                           
output-
 9 
 10 
 11 
 12 
 13 



#!usr/bin/ruby

class Operations

  def initialize
  end

  def product(var1,var2)
    return var1*var2
  end

end

prod1=Operations.new
puts prod1.product(2,3)

prod1=Operations.new
puts prod1.product(2,4)

prod1=Operations.new
puts prod1.product(2,5)


output-
6
8
10

------------------or---------------------

#!usr/bin/ruby


class Operations


  def sum()
    puts" #{@@var1+@@var2} "
  end

  def product(var1,var2)
    return var1*var2
  end

end


prod1=Operations.new
puts prod1.product(2,3)

prod1=Operations.new
puts prod1.product(2,4)

prod1=Operations.new
puts prod1.product(2,5)


-------------example of class and objects----------

#!usr/bin/ruby

$school_name ='anthonys school'

class Students

  @@no_of_students=0

  def initialize(id,name,standard)
    @student_id=id
    @student_name=name
    @class_standard=standard
      puts "id: #{@student_id}, name: #{@student_name} , class: #{@class_standard}"
      @@no_of_students += 1
      puts "student count #{@@no_of_students}"
  end

end

student1=Students.new(1,'mayanka','6th class')
student2=Students.new(2,'ammy','2th class')
student3=Students.new(3,'alex','9th class')
student4=Students.new(4,'ray','8th class')
student5=Students.new(5,'katty','6th class')
student6=Students.new(6,'tamy','3th class')

output-
id: 1, name: mayanka , class: 6th class
student count 1
id: 2, name: ammy , class: 2th class
student count 2
id: 3, name: alex , class: 9th class
student count 3
id: 4, name: ray , class: 8th class
student count 4
id: 5, name: katty , class: 6th class
student count 5
id: 6, name: tamy , class: 3th class
student count 6


 -------inspect with objects--------

#!usr/bin/ruby

$school_name ='anthonys school'

class Students

  @@no_of_students=0

  def initialize(id,name,standard)
    @student_id=id
    @student_name=name
    @class_standard=standard
  end

end

student1=Students.new(1,'mayanka','6th class')

puts student1.inspect

output-

#<Students:0x0000564fe384b0a0 @student_id=1, @student_name="mayanka", @class_standard="6th class">


------------------class and object without using return-----------

#!usr/bin/ruby


class Operations


  def sum(var1,var2)
    puts" #{var1+var2} "
  end

end



sum1=Operations.new
sum1.sum(2,3)

sum2=Operations.new
sum2.sum(2,4)

sum3=Operations.new
sum3.sum(2,5)


output-
 5
 6
 7


-------------------class and object using overloading-------

  #!usr/bin/ruby

class Adding

  def sum(*args)

    case args.size
    when 1
        return args[0]
    when 2
      return args[0] + args[1]
    end

  end
end

puts Adding.new.sum(2,3)


output-

  5


--------------febonacci program----------


  #!usr/bin/ruby


class Fibonacci
  @@var1=0
  @@var2=1
  @@var3

  def calculate()
    puts "#{@@var1} \n#{@@var2} "

    for i in 2...10
      @@var3 = @@var1+ @@var2
      puts "#{@@var3}"
      @@var1=@@var2
      @@var2=@@var3
    end
  end
end

cal=Fibonacci.new.calculate


output-
0
1
1
2
3
5
8
13
21
34

---------using recursion----

  #!usr/bin/ruby


class Fibonacci
  @@var1=0
  @@var2=1
  @@var3
  @@count=0

  puts "#{@@var1} \n#{@@var2} "

  def calculate()
      @@var3 = @@var1+ @@var2
      puts "#{@@var3}"

      @@count +=1
      @@var1=@@var2
      @@var2=@@var3

      if @@count<=8
        calculate
      end
  end
end

cal=Fibonacci.new.calculate


output-
0
1
1
2
3
5
8
13
21
34
55

-------------prime number program--------

  #!/usr/bin/ruby

class Primenumber
  @@count=0

  def isit(var)
    for i in 1...var

    if var%i == 0
      @@count +=1
    end
  end
    if @@count>2
      puts"its not a prime number"
    else
      puts"its a prime number"
    end
  end
end

prime1=Primenumber.new.isit(13)


output-

  its a prime number

---------palindrome or not-------

#!/usr/bin/ruby

class Palindrome

  def cal(input)

    @var=input
    @one =0
    while @var!=0 do
      @rem=@var%10
      @one *= 10
      @one += @rem
      @var /=10
    end
    if @one == input
      puts "the number is palindrome"
    else
      puts "the number is not palindrome"
    end

  end
end

ob1= Palindrome.new.cal(12321)


Output- the number is palindrome.


  
  
#!/usr/bin/ruby

class Palindrome

  def cal(input)

    @var=input
    @one =0
    while @var!=0 do
      @rem=@var%10
      @one *= 10
      @one += @rem
      @var /=10
    end
    if @one == input
      puts "the number is palindrome"
    else
      puts "the number is not palindrome"
    end

  end
end

ob1= Palindrome.new.cal(12321876)

output- the number is not palindrome

