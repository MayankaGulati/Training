			RUBY-


RVM INSTALLATION-


sudo apt install curl
curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

sudo apt-get update
sudo apt-get install git-core zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev software-properties-common libffi-dev nodejs yarn

sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
curl -sSL https://get.rvm.io | bash -s stable
source ~/.rvm/scripts/rvm
rvm install 3.0.1
rvm use 3.0.1 --default
ruby -v

IF THE KEY gpg --keyserver GIVES ERROR-

curl -sSL https://rvm.io/mpapis.asc | sudo gpg --import -
curl -sSL https://rvm.io/pkuczynski.asc | sudo gpg --import -

ALSO-

beryl@beryl-HP-Pavilion-Notebook:~$ echo "source $HOME/.rvm/scripts/rvm" >> ~/.bash_profile
beryl@beryl-HP-Pavilion-Notebook:~$ echo "source $HOME/.rvm/scripts/rvm" >> ~/.zshrc
beryl@beryl-HP-Pavilion-Notebook:~$ rvm -v
Command 'rvm' not found, but there are 19 similar ones.
beryl@beryl-HP-Pavilion-Notebook:~$ source ~/.bashrc
beryl@beryl-HP-Pavilion-Notebook:~$ rvm -v
rvm 1.29.12 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]


TO INSTALL RUBY-

rvm install ruby  or   rvm install <ruby version>

TO DISPLAY VERSIONS OF RUBY IN RVM-
COMMAND-rvm list
EXAMPLE-
beryl@beryl-HP-Pavilion-Notebook:~$ rvm list
=> ruby-3.0.0 [ x86_64 ]
 * ruby-3.0.1 [ x86_64 ]
   ruby-3.1.0 [ x86_64 ]

# => - current
# =* - current && default
#  * - default



TO SWITCH BETWEEN THE RUBY VERSIONS-
COMMAND- rvm use <version>
EXAMPLE-
beryl@beryl-HP-Pavilion-Notebook:~$ rvm use 3.1.0
Using /home/beryl/.rvm/gems/ruby-3.1.0
beryl@beryl-HP-Pavilion-Notebook:~$ rvm list
   ruby-3.0.0 [ x86_64 ]
 * ruby-3.0.1 [ x86_64 ]
=> ruby-3.1.0 [ x86_64 ]


to write ruby code in terminal use-
	irb

to exit out-
	exit

to write code in vim file-
	write code in vim.rb 

to view result-
	ruby vim.rb

to comment a line-
	#comment line

to comment more than a line-
	=begin
	comment line1
	comment line2
	comment line3
	=end

irb(main):001:0> "mayanka".size
=> 7
irb(main):002:0> "mayanka".class
=> String
irb(main):003:0> 7.class
=> Integer
irb(main):011:0> [7, 9].class
=> Array
irb(main):020:0> c=[2,3,4]
irb(main):021:0> c.class
=> Array
irb(main):022:0> c[1].class
=> Integer
irb(main):023:0> c[10].class
=> NilClass



1. code printing hello world
irb(main):051:1* def hello
irb(main):052:1*   o="hello world"
irb(main):053:1*   puts o
irb(main):054:0> end
=> :hello
irb(main):055:0> hello
hello world
=> nil

2. code printing sum
irb(main):057:1* def sum
irb(main):058:1*   a=20
irb(main):059:1*   b=30
irb(main):060:1*   c =a+b
irb(main):061:1*   return c
irb(main):062:0> end
=> :sum
irb(main):063:0> sum
=> 50


HERE document in ruby-

irb(main):005:0' print <<'start'
irb(main):006:0' display the line1
irb(main):007:0' display the line2
irb(main):008:0> start
display the line1
display the line2
=> nil

irb(main):039:0" print <<start
irb(main):040:0" display the line1
irb(main):041:0" display the line2
irb(main):042:0> start
display the line1
display the line2
=> nil

irb(main):043:0" print <<"start"
irb(main):044:0" display the line1
irb(main):045:0" display the line2
irb(main):046:0> start
display the line1
display the line2
=> nil


irb(main):034:0" print <<"one", <<"two"
irb(main):035:0" this is first line
irb(main):036:0" one
irb(main):037:0" this is second line
irb(main):038:0> two
this is first line
this is second line
=> nil

begin and end statement-
the code will first read begin and last read the end statement

example1-
beryl@beryl-HP-Pavilion-Notebook:~$ vim new.rb 

#!/usr/bin/ruby
puts "statement1"
END {
   puts "statement2"
}
BEGIN {
   puts "statement3"
}

beryl@beryl-HP-Pavilion-Notebook:~$ ruby new.rb 
statement3
statement1
statement2

example2-
beryl@beryl-HP-Pavilion-Notebook:~$ vim new.rb
#!/usr/bin/ruby

puts "This is main Ruby Program"

END {
   puts "Terminating Ruby Program"
}
BEGIN {
   puts "Initializing Ruby Program"
}
 

beryl@beryl-HP-Pavilion-Notebook:~$ ruby new.rb 
Initializing Ruby Program
This is main Ruby Program
Terminating Ruby Program



defining classes-

class Customer
	<variable>=<value>
end


CREATING OBJECT-

<variable>=Customer.new

EXAMPLE-
class Customer
    @@no_of_customer = 0;
    def info(id, name, addr)
      @cust_id =id
      @cust_name=name
      @cust_addr=addr
      puts @cust_id,@cust_name,@cust_addr
    end
end

cust1= Customer.new
cust1.info("1","mayanka","sector9,faridabad")

OUTPUT-
beryl@beryl-HP-Pavilion-Notebook:~$ vim new.rb 
beryl@beryl-HP-Pavilion-Notebook:~$ ruby new.rb
1
mayanka
sector9,faridabad

GLOBAL VARIABLES-

using global variable
#!/usr/bin/ruby
$global_variable = 10
class First
   def print_global
      puts "Global variable in Class1 is #$global_variable"
   end
end
class Second
   def print_global
      puts "Global variable in Class2 is #$global_variable"
   end
end

firstobj = First.new
firstobj.print_global
secondobj = Second.new

secondobj.print_global

output-
beryl@beryl-HP-Pavilion-Notebook:~$ ruby new.rb
Global variable in Class1 is 10
Global variable in Class2 is 10


INSTANCE VARIABLES-
example
#!/usr/bin/ruby
$global_variable = 10
class Customer
  def initialize(id, name, addr)
    @cust_id=id
    @cust_name=name
    @cust_addr=addr
  end
  def display_deets()
    puts "id #@cust_id"
    puts "name: #@cust_name"
    puts "address: #@cust_addr"
  end
end

obj1 = Customer.new("1" , "mayanka" , "sec9 faridabad")
obj2 = Customer.new("2" , "john" , "sec9 faridabad")

obj1.display_deets()
obj2.display_deets()

OUTPUT-
beryl@beryl-HP-Pavilion-Notebook:~$ ruby new.rb
id 1
name: mayanka
address: sec9 faridabad
id 2
name: john
address: sec9 faridabad


CLASS VARIABLES-

#!/usr/bin/ruby
$global_variable = 10
class Customer
  @@no_of_customer = 0
  def initialize(id, name, addr)
    @cust_id=id
    @cust_name=name
    @cust_addr=addr
  end
  def display_deets()
    puts "id #@cust_id"
    puts "name: #@cust_name"
    puts "address: #@cust_addr"
  end
  def total_customer()
    @@no_of_customer +=1
    puts"total no of customers are #@@no_of_customer"
  end
end

obj1 = Customer.new("1" , "mayanka" , "sec9 faridabad")
obj2 = Customer.new("2" , "john" , "sec9 faridabad")
obj1.display_deets()
obj2.display_deets()

obj1.total_customer()
obj2.total_customer()

OUTPUT-
id 1
name: mayanka
address: sec9 faridabad
id 2
name: john
address: sec9 faridabad
total no of customers are 1
total no of customers are 2


USING BACKSLASH IN STRINGS-

CODE-
puts 'writing a "\\" sentence "\" for the string val\'ue'
output-
beryl@beryl-HP-Pavilion-Notebook:~$ ruby again.rb
writing a "\" sentence "\" for the string val'ue


USING NOTATIONS-
puts "writing \a a sentence \n using different \r  notations \e of string represented \f  here"
Output-
writing  a sentence 
  notations f string represented 
                                   here

USING ARRAY CODE-
#!/usr/bin/ruby
arr = [1,2.5,"stringss"]
arr.each do|i|
  puts i
end

OUTPUT-
1
2.5
stringss


USING HASH-

hsh={"name" => "mayanka", "surname" => "gulati"}
hsh.each do |key, value|
   print key, " is ", value, "\n"
end
OUTPUT-
beryl@beryl-HP-Pavilion-Notebook:~$ ruby key.rb
name is mayanka
surname is gulati

example2-
#!/usr/bin/ruby
hsh = colors = {"red" => 0xf00, "green" => 0x0f0, "yellow" => 0x00f}
hsh.each do |key, value|
  print key , "is" , value, "\n"
end
OUTPUT-
redis3840
greenis240
yellowis15


RUBY RANGES-

example1-
#!/usr/bin/ruby
(1..5).each do |n|
  print n, ' '
end
OUTPUT-
1 2 3 4 5

example2-
#!/usr/bin/ruby
(1...5).each do |n|
  print n, ' '
end
  OUTPUT-
1 2 3 4


IF ELSE

#!usr/bin/ruby
$x=5
if($x<3)
  puts "#$x is less than 3"
elsif($x>3)
  puts "#$x is greator than 3"
else($x==3)
  puts "#$x is equal to 3"
end

OUTPUT-
5 is greator than 3



IF MODIFIER-

#!usr/bin/ruby
$var=1
print "approved \n"   if   $var   

OUTPUT-
approved 


UNLESS STATEMENT-
#!usr/bin/ruby
x = 7
unless x>=5
  puts "x is less than 5"
else
  puts "x is greater than 5"
end 

OUTPUT-
x is greater than 5

