METHODS:


Methods are similar to functions in any programming language.
Method names should begin with a lowercase letter.

Syntax-
def <function/method name> (<arguments>,<arguments>)
	expressions..
end

example- 

#!/usr/bin/ruby
def test (a,b)
  puts"first subject marks #{a}"
  puts"second subject marks #{b}"
end

test 9 , 10

OUTPUT-

first subject marks 9
second subject marks 10


EXAMPLE 2-

#!/usr/bin/ruby
def test (var1 = "ruby", var2 = "rails")
          puts"the programming language #{var1}"
          puts"the programming language #{var2}"
end
test
test "C" , "C++"

OUTPUT-
the programming language ruby
the programming language rails
the programming language C
the programming language C++ 

EXAMPLE3-

#!/usr/bin/ruby
def sum(var1,var2,var3)
  puts"sum is : #{var1+var2+var3}"
end

sum 7,8,9

OUTPUT-
sum is : 24




Methods with return type-

example1-
#!/usr/bin/ruby
def name()
  return "Mayanka"
end

name = name()
print "my name is : #{name} \n"

OUTPUT-
my name is : Mayanka 


example2-

#!/usr/bin/ruby
def variable
  i=10
  j=20
  k=30
return i,j,k
end

var = variable
puts var

OUTPUT-
10
20
30

example3-
#!/usr/bin/ruby

def sample(*test)
  puts "the no of parameters is #{test.length}"
  for i in 0...test.length
    puts "the paramaeter is: #{test[i]}"
  end
end

sample "alex" , "16" , "M"
sample "jackob" , "18" , "M"

OUTPUT-
the no of parameters is 3
the paramaeter is: alex
the paramaeter is: 16
the paramaeter is: M
the no of parameters is 3
the paramaeter is: jackob
the paramaeter is: 18
the paramaeter is: M



Methods in classes-

example-

#!/usr/bin/ruby

class Major
  def details
  end
  def Major.salary(var1,var2)
    sal = var1/var2
    return sal
  end
end

sal=Major.salary(300000,12)
puts "#{sal}"

OUTPUT-
25000


BLOCKS-


blocks are the chunk of code which has same name as the method or function in which theyâ€™re called.

Syntax-

block_name {
   statement1
   statement2
   ..........
}
Example-

#!/usr/bin/ruby

def test
  puts "statement of function"
  yield
  puts "statement of function"
  yield
end

test{puts"statement of block"}


OUTPUT-
statement of function
statement of block
statement of function
statement of block


passing values in block statements-

#!/usr/bin/ruby

def test
  puts "start count"
  yield 1
  puts "skip 1"
  yield 3

end

test{ |i| puts"#{i}"}

OUTPUT-
start count
1
skip 1
3


example-
#!/usr/bin/ruby

def test
  puts "name"
  yield "mayanka"
  puts "age and height"
  yield 22,"5'3"
end

test{|a,b| puts "#{a}  #{b}" }

OUTPUT-
name
mayanka  
age and height
22  5'3

BEGIN AND END BLOCK -

example-
#!/usr/bin/ruby

BEGIN{puts"begin code block"}

END{puts "end code block"}
puts "main code block"


output-
begin code block
main code block
end code block
